package server

import (
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	_ "github.com/zerjioang/flights/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/zerjioang/flights/server/ctl"
)

// Start deploys a new HTTP service with default configuration
//	@title			Flights API
//	@version		1.0
//	@description	API to calculate the flight of a person
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	zerjioang
//	@contact.url	https://github.com/zerjioang
//	@contact.email	none@gmail.com

//	@license.name	MIT
//	@license.url	https://github.com/zerjioang/flights/blob/main/LICENSE

// @host		localhost:8080
// @BasePath	/
// @schemes	http
func Start() error {
	e := echo.New()
	e.HideBanner = true
	e.HidePort = false
	e.Debug = true

	// register middlewares to be used
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORS())

	e.GET("/", index)

	apiv1 := e.Group("v1")
	apiv1.GET("/", index)
	apiv1.GET("", index)

	docsCtl := ctl.NewSwaggerController("user", "pwd")
	docsCtl.Register(apiv1)

	healthCtl := ctl.NewHealthController()
	healthCtl.Register(apiv1)

	flightCtl := ctl.NewFlightController()
	flightCtl.Register(apiv1)

	// Start server
	return e.Start(":8080")
}

// index returns a hello world like message to the API to avoid showing an error
// when visiting endpoints like / or /v1
func index(c echo.Context) error {
	return c.String(200, "Please make a POST to /v1/calculate or visit API docs at /v1/docs")
}
